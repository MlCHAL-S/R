setwd('Desktop/R/18XI')
# Load data from the CSV file
srczas <- read.csv2("SrCzasAlgorytmy.csv", sep = ";", dec = ".")
# Load necessary libraries
library(nortest)    # For normality test (ad.test)
library(agricolae)  # For SNK test
#library(car)        # For Levene's test
library(dplyr)      # For data manipulation (%>% and group_by)
library(ExpDes)     # For SNK (Student-Newman-Keuls) test
# Sort the dataset by the "Algorytm" column
srczasort <- srczas[order(srczas[, "Algorytm"]),]
# Perform Anderson-Darling normality test for each group of 20 rows
adsrczasN <- c(
ad.test(srczasort[1:20, 3])$p.value,
ad.test(srczasort[21:40, 3])$p.value,
ad.test(srczasort[41:60, 3])$p.value,
ad.test(srczasort[61:80, 3])$p.value,
ad.test(srczasort[81:100, 3])$p.value
)
# Define a function to perform Anderson-Darling normality test
adsrczas <- function(y) {
adsrcz <- rep(0, 5) # Initialize a vector for results
for (i in 1:length(adsrcz)) {
adsrcz[i] <- ad.test(y[(1 + 20 * (i - 1)):(20 * i), 3])$p.value
}
print(adsrcz)
}
adsrczas(srczasort)
# Define a function to calculate means for each group
srcz <- function(y) {
sredniczas <- rep(0, 5) # Initialize a vector for means
for (i in 1:length(sredniczas)) {
sredniczas[i] <- mean(y[(1 + 20 * (i - 1)):(20 * i), 3])
}
print(sredniczas)
}
srcz(srczasort)
# Define a function to calculate variances for each group
varsrczas <- function(y) {
varsrcz <- rep(0, 5) # Initialize a vector for variances
for (i in 1:length(varsrcz)) {
varsrcz[i] <- var(y[(1 + 20 * (i - 1)):(20 * i), 3])
}
print(varsrcz)
}
varsrczas(srczasort)
# Perform one-way ANOVA to compare means across groups
aovsrczas <- aov(srczasort$Czas ~ srczasort$Algorytm)
anova(aovsrczas)
# Perform Kruskal-Wallis test (non-parametric alternative to ANOVA)
kruskal.test(srczasort$Czas, srczasort$Algorytm)
# Perform post-hoc tests
# Tukey's Honest Significant Difference (assumes equal group sizes)
TukeyHSD(aovsrczas)
# Prepare for SNK test
dfErrorSrCzas <- df.residual(aovsrczas)                  # Degrees of freedom
SSerrorSrCzas <- sum(aovsrczas$residuals^2)             # Sum of squares error
MSerrorSrCzas <- SSerrorSrCzas / dfErrorSrCzas          # Mean square error
# Perform SNK test (Student-Newman-Keuls)
snk(srczasort$Czas, srczasort$Algorytm, dfErrorSrCzas, SSerrorSrCzas)
setwd('Desktop/R/18XI')
# setwd('Desktop/R/18XI')
# Load data from the CSV file
srczas <- read.csv2("SrCzasAlgorytmy.csv", sep = ";", dec = ".")
# Load necessary libraries
library(nortest)    # For normality test (ad.test)
library(agricolae)  # For SNK test
#library(car)        # For Levene's test
library(dplyr)      # For data manipulation (%>% and group_by)
library(ExpDes)     # For SNK (Student-Newman-Keuls) test
#N(*,*)
adsrczasN<-c(ad.test(srczasort[1:20,3])$p.value,
ad.test(srczasort[21:40,3])$p.value,
ad.test(srczasort[41:60,3])$p.value,
ad.test(srczasort[61:80,3])$p.value,
ad.test(srczasort[81:100,3])$p.value)
# lub funkcja
adsrczas<-function(y){
adsrcz<-rep(0,5)
for (i in 1:length(adsrcz))
adsrcz[i]<-ad.test(y[(1+20*(i-1)):(20*i),3])$p.value
print(adsrcz)}
adsrczas(srczasort)
# mean
srcz<-function(y){
sredniczas<-rep(0,5)
for (i in 1:length(sredniczas))
sredniczas[i]<-mean(y[(1+20*(i-1)):(20*i),3])
print(sredniczas)}
srcz(srczasort)
# var
varsrczas<-function(y){
varsrcz<-rep(0,5)
for (i in 1:length(varsrcz))
varsrcz[i]<-var(y[(1+20*(i-1)):(20*i),3])
print(varsrcz)}
varsrczas(srczasort)
### ANoVA
aovsrczas<-aov(srczasort$Czas~srczasort$Algorytm)
anova(aovsrczas)
# Kruskal-Wallis - nieparametryczna alternatywa dla ANOVA jeśli np. warunek N() nie jest spełniony
kruskal.test(srczasort$Czas,srczasort$Algorytm)
## TESTY post-hoc:
#Tukey - "uczciwie istotnych różnic", zakłada równoliczność grup
TukeyHSD(aovsrczas)
#LSD (agricolae) - nie zakłada równoliczności grup
# Test SNK (Student-Newman-Keuls) - podobny do TukeyHSD
dfErrorSrCzas <- df.residual(aovsrczas)
SSerrorSrCzas <- sum(aovsrczas$residuals^2)
MSerrorSrCzas <- SSerrorSrCzas/dfErrorSrCzas
snk(srczasort$Czas,srczasort$Algorytm,dfErrorSrCzas,SSerrorSrCzas)
SrSpalanie <- read.csv2("SrSpalanie.csv", sep=";", dec=".", header=TRUE)
SrSpalanie
# Data: SrSpalanie
SrSpalanie <- read.csv2("SrSpalanie.csv", sep=";", dec=".", header=TRUE)
# Sort data by algorithm/group
SrSpalanieSort <- SrSpalanie[order(SrSpalanie[,"Algorithm"]),]
# Data: SrSpalanie
SrSpalanie <- read.csv2("SrSpalanie.csv", sep=";", dec=".", header=TRUE)
# Handle missing values (remove rows with NA or fill with mean/mode as needed)
SrSpalanie <- SrSpalanie %>% na.omit()
# Sort data by algorithm/group
SrSpalanieSort <- SrSpalanie[order(SrSpalanie[,"Algorithm"]),]
# Data: SrSpalanie
SrSpalanie <- read.csv("SrSpalanie.csv", sep=";", dec=".", header=TRUE)
# Handle missing values (remove rows with NA or fill with mean/mode as needed)
SrSpalanie <- SrSpalanie %>% na.omit()
# Sort data by algorithm/group
SrSpalanieSort <- SrSpalanie[order(SrSpalanie[,"Algorithm"]),]
# Sort data by algorithm/group
SrSpalanieSort <- SrSpalanie[order(SrSpalanie[,"Algorithm"]),]
SrSpalanie <- read.csv("SrSpalanie.csv", sep=";", dec=".", header=TRUE)
SrSpalanie
# setwd('Desktop/R/18XI')
# Load necessary libraries
library(nortest)    # For normality test (ad.test)
library(agricolae)  # For SNK test
#library(car)        # For Levene's test
library(dplyr)      # For data manipulation (%>% and group_by)
library(ExpDes)     # For SNK (Student-Newman-Keuls) test
# Load SrSpalanie data
SrSpalanie <- read.csv2("SrSpalanie.csv", sep=";", dec=".", header=TRUE)
# Transform data to long format for analysis
SrSpalanie_long <- SrSpalanie %>%
mutate(ID = row_number()) %>%  # Add an ID column
pivot_longer(cols = starts_with("S"), names_to = "Algorithm", values_to = "Spalanie") %>%
na.omit()  # Remove missing values
install.packages("tidyr")
# setwd('Desktop/R/18XI')
# Load data from the CSV file
srczas <- read.csv2("SrCzasAlgorytmy.csv", sep = ";", dec = ".")
# Load necessary libraries
library(nortest)    # For normality test (ad.test)
library(agricolae)  # For SNK test
#library(car)        # For Levene's test
library(dplyr)      # For data manipulation (%>% and group_by)
library(ExpDes)     # For SNK (Student-Newman-Keuls) test
# Load SrSpalanie data
SrSpalanie <- read.csv2("SrSpalanie.csv", sep=";", dec=".", header=TRUE)
# Transform data to long format for analysis
SrSpalanie_long <- SrSpalanie %>%
mutate(ID = row_number()) %>%  # Add an ID column
pivot_longer(cols = starts_with("S"), names_to = "Algorithm", values_to = "Spalanie") %>%
na.omit()  # Remove missing values
# Load the SrSpalanie data
srspalanie <- read.csv2("SrSpalanie.csv", sep=";", dec=".", header=TRUE)
# Preprocess: Ensure numeric values and handle missing data
srspalanie <- as.data.frame(lapply(srspalanie, function(x) as.numeric(as.character(x))))
srspalanie[is.na(srspalanie)] <- 0  # Replace missing values with 0 (or another strategy as needed)
# Create a "long format" for analysis (like srczasort)
srspalanie_long <- data.frame(
Group = rep(colnames(srspalanie), each = nrow(srspalanie)),
Value = as.vector(as.matrix(srspalanie))
)
# Remove rows with zero values introduced from missing data
srspalanie_long <- srspalanie_long[srspalanie_long$Value > 0, ]
# Sort data by Group
srspalanie_sort <- srspalanie_long[order(srspalanie_long$Group),]
# ANOVA
aov_srspalanie <- aov(Value ~ Group, data = srspalanie_sort)
anova(aov_srspalanie)
# Kruskal-Wallis Test (if needed)
kruskal.test(srspalanie_sort$Value, srspalanie_sort$Group)
# SNK test for SrSpalanie
dfErrorSrSpalanie <- df.residual(aov_srspalanie)
SSerrorSrSpalanie <- sum(aov_srspalanie$residuals^2)
MSerrorSrSpalanie <- SSerrorSrSpalanie / dfErrorSrSpalanie
snk(srspalanie_sort$Value, srspalanie_sort$Group, dfErrorSrSpalanie, SSerrorSrSpalanie)
# Load the SrSpalanie data
srspalanie <- read.csv2("SrSpalanie.csv", sep=";", dec=".", header=TRUE)
srspalanie
# Preprocess: Ensure numeric values and handle missing data
srspalanie <- as.data.frame(lapply(srspalanie, function(x) as.numeric(as.character(x))))
srspalanie[is.na(srspalanie)] <- 0  # Replace missing values with 0 (or another strategy as needed)
# Create a "long format" for analysis (like srczasort)
srspalanie_long <- data.frame(
Group = rep(colnames(srspalanie), each = nrow(srspalanie)),
Value = as.vector(as.matrix(srspalanie))
)
# Remove rows with zero values introduced from missing data
srspalanie_long <- srspalanie_long[srspalanie_long$Value > 0, ]
# Sort data by Group
srspalanie_sort <- srspalanie_long[order(srspalanie_long$Group),]
# ANOVA
aov_srspalanie <- aov(Value ~ Group, data = srspalanie_sort)
anova(aov_srspalanie)
# Kruskal-Wallis Test (if needed)
kruskal.test(srspalanie_sort$Value, srspalanie_sort$Group)
# SNK test for SrSpalanie
dfErrorSrSpalanie <- df.residual(aov_srspalanie)
SSerrorSrSpalanie <- sum(aov_srspalanie$residuals^2)
MSerrorSrSpalanie <- SSerrorSrSpalanie / dfErrorSrSpalanie
snk(srspalanie_sort$Value, srspalanie_sort$Group, dfErrorSrSpalanie, SSerrorSrSpalanie)
srczas
# Two-Way ANOVA
# Include both Algorytm and InspNatura as factors
aov_two_way <- aov(Czas ~ Algorytm * InspNatura, data = srczasort)
anova(aov_two_way)
# Two-Way ANOVA
# Include both Algorytm and InspNatura as factors
aov_two_way <- aov(Czas ~ Algorytm * InspNatura, data = srczasort)
anova(aov_two_way)
# Load data from the CSV file
srczas <- read.csv2("SrCzasAlgorytmy.csv", sep = ";", dec = ".")
srczas
# Load necessary libraries
library(nortest)    # For normality test (ad.test)
library(agricolae)  # For SNK test
#library(car)        # For Levene's test
library(dplyr)      # For data manipulation (%>% and group_by)
library(ExpDes)     # For SNK (Student-Newman-Keuls) test
#N(*,*)
adsrczasN<-c(ad.test(srczasort[1:20,3])$p.value,
ad.test(srczasort[21:40,3])$p.value,
ad.test(srczasort[41:60,3])$p.value,
ad.test(srczasort[61:80,3])$p.value,
ad.test(srczasort[81:100,3])$p.value)
# lub funkcja
adsrczas<-function(y){
adsrcz<-rep(0,5)
for (i in 1:length(adsrcz))
adsrcz[i]<-ad.test(y[(1+20*(i-1)):(20*i),3])$p.value
print(adsrcz)}
adsrczas(srczasort)
# mean
srcz<-function(y){
sredniczas<-rep(0,5)
for (i in 1:length(sredniczas))
sredniczas[i]<-mean(y[(1+20*(i-1)):(20*i),3])
print(sredniczas)}
srcz(srczasort)
# var
varsrczas<-function(y){
varsrcz<-rep(0,5)
for (i in 1:length(varsrcz))
varsrcz[i]<-var(y[(1+20*(i-1)):(20*i),3])
print(varsrcz)}
varsrczas(srczasort)
### ANoVA
aovsrczas<-aov(srczasort$Czas~srczasort$Algorytm)
anova(aovsrczas)
# Kruskal-Wallis - nieparametryczna alternatywa dla ANOVA jeśli np. warunek N() nie jest spełniony
kruskal.test(srczasort$Czas,srczasort$Algorytm)
## TESTY post-hoc:
#Tukey - "uczciwie istotnych różnic", zakłada równoliczność grup
TukeyHSD(aovsrczas)
#LSD (agricolae) - nie zakłada równoliczności grup
# Test SNK (Student-Newman-Keuls) - podobny do TukeyHSD
dfErrorSrCzas <- df.residual(aovsrczas)
SSerrorSrCzas <- sum(aovsrczas$residuals^2)
MSerrorSrCzas <- SSerrorSrCzas/dfErrorSrCzas
snk(srczasort$Czas,srczasort$Algorytm,dfErrorSrCzas,SSerrorSrCzas)
# Load data from the CSV file
srczas <- read.csv2("SrCzasAlgorytmy.csv", sep = ";", dec = ".")
srczas
# Sort data by Algorytm
srczasort <- srczas[order(srczas[,"Algorytm"]),]
# Shapiro-Wilk Test (N(*,*)) for Normality
adsrczasN <- c(ad.test(srczasort[1:20,3])$p.value,
ad.test(srczasort[21:40,3])$p.value,
ad.test(srczasort[41:60,3])$p.value,
ad.test(srczasort[61:80,3])$p.value,
ad.test(srczasort[81:100,3])$p.value)
# Alternatively, define as a function
adsrczas <- function(y) {
adsrcz <- rep(0, 5)
for (i in 1:length(adsrcz))
adsrcz[i] <- ad.test(y[(1 + 20 * (i - 1)):(20 * i), 3])$p.value
print(adsrcz)
}
adsrczas(srczasort)
# Mean function
srcz <- function(y) {
sredniczas <- rep(0, 5)
for (i in 1:length(sredniczas))
sredniczas[i] <- mean(y[(1 + 20 * (i - 1)):(20 * i), 3])
print(sredniczas)
}
srcz(srczasort)
# Variance function
varsrczas <- function(y) {
varsrcz <- rep(0, 5)
for (i in 1:length(varsrcz))
varsrcz[i] <- var(y[(1 + 20 * (i - 1)):(20 * i), 3])
print(varsrcz)
}
varsrczas(srczasort)
# Two-Way ANOVA
# Include both Algorytm and InspNatura as factors
aov_two_way <- aov(Czas ~ Algorytm * InspNatura, data = srczasort)
anova(aov_two_way)
# Kruskal-Wallis test as a non-parametric alternative
kruskal.test(srczasort$Czas ~ interaction(srczasort$Algorytm, srczasort$InspNatura))
## Post-hoc analysis for two-way ANOVA
# TukeyHSD for pairwise comparisons
TukeyHSD(aov_two_way)
# Calculate SNK test manually
dfErrorSrCzas <- df.residual(aov_two_way)
SSerrorSrCzas <- sum(aov_two_way$residuals^2)
MSerrorSrCzas <- SSerrorSrCzas / dfErrorSrCzas
snk(srczasort$Czas, interaction(srczasort$Algorytm, srczasort$InspNatura), dfErrorSrCzas, SSerrorSrCzas)
plot(TukeyHSD(aov_two_way))
plot(TukeyHSD(aov_two_way, conf.level = .95), las = 2)
getwd()
cd ..
setwd('/home/michal/Desktop/R/25XI')
library(nFactors)
install.packages('nFactors')
dane <- read.csv('AnCz10zm.csv', header = TRUE, row.names = 1)
dane
dane <- read.csv2('AnCz10zm.csv', header = TRUE, row.names = 1)
dane
dane <- read.csv2('AnCz10zm.csv', header = TRUE, row.names = 1)
dane
mkorelacji <- cor(dane)
mkorelacji
library(nFactors)
library(nFactors)
library(nFactors)
install.packages('nFactors')
library(nFactors)
library(nFactors)
