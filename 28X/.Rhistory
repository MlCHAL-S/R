getwd()
setwd("R/21X")
setwd("R/21X")
getwd()
setwd("Desktop/R/21X")
setwd("Desktop/R/21X")
# setwd("Desktop/R/21X")
mw <- read.csv("WM.csv", header=T, sep=';')
mw
X <- cbind(1, mw$W)
X
mw <- read.csv("WM.csv", header=T, sep=';')
X <- cbind(1, mw$W)
transposed_X <- t(X)
transposed_X
square_matrix <- X_transposed %*% X
mw <- read.csv("WM.csv", header=T, sep=';')
X <- cbind(1, mw$W)
X_transposed <- t(X)
square_matrix <- X_transposed %*% X
inverse_matrix <- solve(square_matrix)
inverse_matrix
square_matrix <- X_transposed %*% X
print(square_matrix)
inverse_matrix <- solve(square_matrix)
inverse_matrix
X_squared <- X_transposed %*% X
X_inversed <- solve(X_squared)
X, X_transposed, X_squared, X_inversed
mw <- read.csv("WM.csv", header=T, sep=';')
X <- cbind(1, mw$W)
X_transposed <- t(X)
X_squared <- X_transposed %*% X
X_inversed <- solve(X_squared)
print(X, X_transposed, X_squared, X_inversed)
mw <- read.csv("WM.csv", header=T, sep=';')
X <- cbind(1, mw$W)
X_transposed <- t(X)
X_squared <- X_transposed %*% X
X_inversed <- solve(X_squared)
X
X_transposed
X_squared
X_inversed
M <- cbind(mw$M)
M
teta <- solve(X %*% X_transposed) %*% X_transposed %*% M
# setwd("Desktop/R/21X")
mw <- read.csv("WM.csv", header = TRUE, sep = ';')
X <- cbind(1, mw$W)
X_transposed <- t(X)
X_squared <- X_transposed %*% X
X_inversed <- solve(X_squared)
M <- as.matrix(mw$M)
teta <- X_inversed %*% X_transposed %*% M
print(teta)
library(ggplot2)
intercept <- teta[1, 1]
slope <- teta[2, 1]
ggplot(mw, aes(x = W, y = M)) +
geom_point(color = "blue", size = 3) +          # Plot points for each (W, M) pair
geom_abline(intercept = intercept, slope = slope, color = "red", linetype = "dashed", size = 1) +  # Add the regression line using coefficients from teta
labs(title = "Linear Regression: M vs. W",
x = "W (Weight or Independent Variable)",
y = "M (Dependent Variable)") +
theme_minimal()  # Clean theme for better aesthetics
ggplot(mw, aes(x = W, y = M)) +
geom_point(color = "blue", size = 3) +
geom_abline(intercept = intercept, slope = slope, color = "red", linetype = "dashed", size = 1) +
labs(title = "Linear Regression: M vs. W",
x = "W",
y = "M"
ggplot(mw, aes(x = W, y = M)) +
library(ggplot2)
intercept <- teta[1, 1]
slope <- teta[2, 1]
ggplot(mw, aes(x = W, y = M)) +
geom_point(color = "blue", size = 10) +
geom_abline(intercept = intercept, slope = slope, color = "red", linetype = "dashed", size = 1) +
labs(title = "Linear Regression: M vs. W",
x = "W",
y = "M"
ggplot(mw, aes(x = W, y = M)) +
ggplot(mw, aes(x = W, y = M)) +
geom_point(color = "blue", size = 7) +
geom_abline(intercept = intercept, slope = slope, color = "red", linetype = "dashed", size = 1) +
labs(title = "Linear Regression: M vs. W",
x = "W",
y = "M"
)
setwd("Desktop/R/28X")
mw <- read.csv("WM.csv", header = TRUE, sep = ';')
X <- cbind(1, mw$W)
X_transposed <- t(X)
X_squared <- X_transposed %*% X
X_inversed <- solve(X_squared)
M <- as.matrix(mw$M)
teta <- X_inversed %*% X_transposed %*% M
teta
library(ggplot2)
intercept <- teta[1, 1]
slope <- teta[2, 1]
ggplot(mw, aes(x = W, y = M)) +
geom_point(color = "blue", size = 3) +
geom_abline(intercept = intercept, slope = slope, color = "red", linetype = "dashed", size = 1) +
labs(title = "Linear Regression: M vs. W",
x = "W",
y = "M"
)
alfa_pocz <- c(-100, 1, 1)
MNW <- function(alfa, M, W) {
sum(0.5 * log(alfa[3]) + 0.5 * (M - alfa[1] - alfa[2] * W)^2 / alfa[3])
}
oszacowane_parametry <- optim(alfa_pocz, MNW, M=mw$M, W = mw$W, hessian = TRUE, method = c("Nelder-Mead"))
oszacowane_parametry
summary(lm(mw$M ~ mw$W))
summary(lm(mw$M ~ mw$W))
trendy <- read.csv("Trendy.csv", header = TRUE, sep = ';')
trendy
t <- 1:20
set_seed(5)
?set_seed
??set_seed
set.seed(5)
y0 <- c(20:1) + rnorm(20)
plot(y0)
plot(t, y0, main = "Best Fit Line for y0", xlab = "t", ylab = "y0", pch = 16, col = "blue")
plot(t, y0)
model <- lm(y0 ~ t)
abline(model)
?abline
summary(model)
model <- lm(y0 ~ t)
predicted_y0 <- predict(model)
# Add the best-fit line using `lines()`
lines(t, predicted_y0)
predicted_y0
predict(model)
t
?lines
?lines(t, predicted_y0)
plot(t, y0)
model <- lm(y0 ~ t)
predicted_y0 <- predict(model)
?lines(t, predicted_y0)
summary(model)
lines(t, predicted_y0)
