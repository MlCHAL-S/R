getwd()
setwd('Desktop/R/4XI')
data <- read.csv('Trendy.csv')
data
data <- read.csv('Trendy.csv', SEP=';')
data <- read.csv('Trendy.csv', sep=';')
data
t1 <- data$y1
t1
plot(t1)
plot(data$y1)
plot(data$y2)
plot(data$y3)
plot(data$y4)
plot(data$y1)
plot(data$y2)
plot(data$y3)
plot(data$y4)
plot(data$y1)
plot(data$y1)
plot(data$y2)
par(mfrow = c(2, 2))
plot(data$y1)
plot(data$y2)
plot(data$y3)
plot(data$y4)
# Extract the y1 data
y <- data$y1
t <- 1:length(y)  # time or index variable
# 1. Fit linear model y = a*t + b
fit_linear <- lm(y ~ t)
# 2. Fit quadratic model y = a*t^2 + b*t + c
fit_quadratic <- lm(y ~ poly(t, 2, raw = TRUE))  # raw = TRUE keeps the formula in powers of t
# 3. Fit simple quadratic model y = a*t^2 + c
fit_simple_quadratic <- lm(y ~ I(t^2))
# Function to calculate adjusted R^2 for each model
adjusted_r2 <- function(model) {
summary(model)$adj.r.squared
}
# Calculate adjusted R^2 for each model
r2_linear <- adjusted_r2(fit_linear)
r2_quadratic <- adjusted_r2(fit_quadratic)
r2_simple_quadratic <- adjusted_r2(fit_simple_quadratic)
# Print adjusted R^2 values
cat("Adjusted R^2 for linear model (y = a*t + b):", r2_linear, "\n")
cat("Adjusted R^2 for quadratic model (y = a*t^2 + b*t + c):", r2_quadratic, "\n")
cat("Adjusted R^2 for simple quadratic model (y = a*t^2 + c):", r2_simple_quadratic, "\n")
# Plot the data with each model's fit line
par(mfrow = c(1, 1))
plot(t, y, main = "Fit Comparison for data$y1", xlab = "t", ylab = "y1")
# Add fitted lines for each model
lines(t, predict(fit_linear), col = "blue", lwd = 2, lty = 1)      # Linear model in blue
lines(t, predict(fit_quadratic), col = "red", lwd = 2, lty = 2)    # Quadratic model in red
lines(t, predict(fit_simple_quadratic), col = "green", lwd = 2, lty = 3) # Simple quadratic in green
legend("topright", legend = c("Linear (y = a*t + b)", "Quadratic (y = a*t^2 + b*t + c)", "Simple Quadratic (y = a*t^2 + c)"),
col = c("blue", "red", "green"), lty = 1:3, lwd = 2)
par(mfrow = c(2, 2))
plot(data$y1)
plot(data$y2)
plot(data$y3)
plot(data$y4)
y <- data$y1
t <- 1:length(y)  # time or index variable
t
fit_linear <- lm(y ~ t)
fit_quadratic <- lm(y ~ poly(t, 2, raw = TRUE))
lines(t, predict(fit_linear), col = "blue", lwd = 2, lty = 1)
lines(t, predict(fit_quadratic), col = "red", lwd = 2, lty = 2)
lines(t, predict(fit_simple_quadratic), col = "green", lwd = 2, lty = 3)
plot(y)
y <- data$y1
t <- 1:length(y)
plot(y)
# y = at + b
fit_linear <- lm(y ~ t)
# y = a*t^2 + b*t + c
fit_quadratic <- lm(y ~ poly(t, 2, raw = TRUE))
# y = a*t^2 + c
fit_simple_quadratic <- lm(y ~ I(t^2))
lines(t, predict(fit_linear), col = "blue", lwd = 2, lty = 1)
lines(t, predict(fit_quadratic), col = "red", lwd = 2, lty = 2)
lines(t, predict(fit_simple_quadratic), col = "green", lwd = 2, lty = 3)
y <- data$y1
t <- 1:length(y)
plot(y)
# y = at + b
fit_linear <- lm(y ~ t)
# y = a*t^2 + b*t + c
fit_quadratic <- lm(y ~ poly(t, 2, raw = TRUE))
# y = a*t^2 + c
fit_simple_quadratic <- lm(y ~ I(t^2))
lines(t, predict(fit_linear), col = "blue", lwd = 2, lty = 1)
lines(t, predict(fit_quadratic), col = "red", lwd = 2, lty = 2)
lines(t, predict(fit_simple_quadratic), col = "green", lwd = 2, lty = 3)
y <- data$y1
t <- 1:length(y)
plot(y)
# y = at + b
fit_linear <- lm(y ~ t)
# y = a*t^2 + b*t + c
fit_quadratic <- lm(y ~ poly(t, 2, raw = TRUE))
# y = a*t^2 + c
fit_simple_quadratic <- lm(y ~ I(t^2))
lines(t, predict(fit_linear), col = "blue", lwd = 2, lty = 1)
lines(t, predict(fit_quadratic), col = "red", lwd = 2, lty = 2)
lines(t, predict(fit_simple_quadratic), col = "green", lwd = 2, lty = 3)
y <- data$y1
t <- 1:length(y)
plot(y)
# y = at + b
fit_linear <- lm(y ~ t)
# y = a*t^2 + b*t + c
fit_quadratic <- lm(y ~ poly(t, 2, raw = TRUE))
# y = a*t^2 + c
fit_simple_quadratic <- lm(y ~ I(t^2))
lines(t, predict(fit_linear), col = "blue", lwd = 2, lty = 1)
lines(t, predict(fit_quadratic), col = "red", lwd = 2, lty = 2)
lines(t, predict(fit_simple_quadratic), col = "green", lwd = 2, lty = 3)
y <- data$y1
t <- 1:length(y)
plot(y)
# y = at + b
fit_linear <- lm(y ~ t)
# y = a*t^2 + b*t + c
fit_quadratic <- lm(y ~ poly(t, 2, raw = TRUE))
# y = a*t^2 + c
fit_simple_quadratic <- lm(y ~ I(t^2))
lines(t, predict(fit_linear), col = "blue", lwd = 2, lty = 1)
lines(t, predict(fit_quadratic), col = "red", lwd = 2, lty = 2)
lines(t, predict(fit_simple_quadratic), col = "green", lwd = 2, lty = 3)
y <- data$y1
t <- 1:length(y)
plot(y)
# y = at + b
fit_linear <- lm(y ~ t)
# y = a*t^2 + b*t + c
fit_quadratic <- lm(y ~ poly(t, 2, raw = TRUE))
# y = a*t^2 + c
fit_simple_quadratic <- lm(y ~ I(t^2))
lines(t, predict(fit_linear), col = "blue", lwd = 2, lty = 1)
lines(t, predict(fit_quadratic), col = "red", lwd = 2, lty = 2)
lines(t, predict(fit_simple_quadratic), col = "green", lwd = 2, lty = 3)
adjusted_r2 <- function(model) {
summary(model)$adj.r.squared
}
r2_linear <- adjusted_r2(fit_linear)
r2_quadratic <- adjusted_r2(fit_quadratic)
r2_simple_quadratic <- adjusted_r2(fit_simple_quadratic)
cat("Adjusted R^2 for linear model (y = a*t + b):", r2_linear, "\n")
cat("Adjusted R^2 for quadratic model (y = a*t^2 + b*t + c):", r2_quadratic, "\n")
cat("Adjusted R^2 for simple quadratic model (y = a*t^2 + c):", r2_simple_quadratic, "\n")
adjusted_r2 <- function(model) {
summary(model)$adj.r.squared
}
r2_linear <- adjusted_r2(fit_linear)
r2_quadratic <- adjusted_r2(fit_quadratic)
r2_simple_quadratic <- adjusted_r2(fit_simple_quadratic)
cat("y = a*t + b: ", r2_linear, "\n")
cat("y = a*t^2 + b*t + c: ", r2_quadratic, "\n")
cat("y = a*t^2 + c:", r2_simple_quadratic, "\n")
summary(fit_simple_quadratic)
summary(fit_simple_quadratic)$adj
adjusted_r2 <- function(model) {
summary(model)$adj
}
r2_linear <- adjusted_r2(fit_linear)
r2_quadratic <- adjusted_r2(fit_quadratic)
r2_simple_quadratic <- adjusted_r2(fit_simple_quadratic)
cat("y = a*t + b: ", r2_linear, "\n")
cat("y = a*t^2 + b*t + c: ", r2_quadratic, "\n")
cat("y = a*t^2 + c:", r2_simple_quadratic, "\n")
adjusted_r2 <- function(model) {
summary(model)$r.squared
}
r2_linear <- adjusted_r2(fit_linear)
r2_quadratic <- adjusted_r2(fit_quadratic)
r2_simple_quadratic <- adjusted_r2(fit_simple_quadratic)
cat("y = a*t + b: ", r2_linear, "\n")
cat("y = a*t^2 + b*t + c: ", r2_quadratic, "\n")
cat("y = a*t^2 + c:", r2_simple_quadratic, "\n")
adjusted_r2 <- function(model) {
summary(model)$r.squared
}
r2_linear <- adjusted_r2(fit_linear)
r2_quadratic <- adjusted_r2(fit_quadratic)
r2_simple_quadratic <- adjusted_r2(fit_simple_quadratic)
cat("y = a*t + b: ", r2_linear, "\n")
cat("y = a*t^2 + b*t + c: ", r2_quadratic, "\n")
cat("y = a*t^2 + c:", r2_simple_quadratic, "\n")
max(r2_linear, r2_quadratic, r2_simple_quadratic)
par(mfrow = c(1, 2))
y1 <- data$y1
t <- 1:length(y)
plot(y)
# y = at + b
fit_linear <- lm(y1 ~ t)
# y = a*t^2 + b*t + c
fit_quadratic <- lm(y1 ~ poly(t, 2, raw = TRUE))
# y = a*t^2 + c
fit_simple_quadratic <- lm(y1 ~ I(t^2))
lines(t, predict(fit_linear), col = "blue", lwd = 2, lty = 1)
lines(t, predict(fit_quadratic), col = "red", lwd = 2, lty = 2)
lines(t, predict(fit_simple_quadratic), col = "green", lwd = 2, lty = 3)
# jakiś miernik R^2 do dopasowania do danych
adjusted_r2 <- function(model) {
summary(model)$r.squared
}
r2_linear <- adjusted_r2(fit_linear)
r2_quadratic <- adjusted_r2(fit_quadratic)
r2_simple_quadratic <- adjusted_r2(fit_simple_quadratic)
cat("y = a*t + b: ", r2_linear, "\n")
cat("y = a*t^2 + b*t + c: ", r2_quadratic, "\n")
cat("y = a*t^2 + c:", r2_simple_quadratic, "\n")
max(r2_linear, r2_quadratic, r2_simple_quadratic)
par(mfrow = c(2, 1))
y1 <- data$y1
t <- 1:length(y)
plot(y)
# y = at + b
fit_linear <- lm(y1 ~ t)
# y = a*t^2 + b*t + c
fit_quadratic <- lm(y1 ~ poly(t, 2, raw = TRUE))
# y = a*t^2 + c
fit_simple_quadratic <- lm(y1 ~ I(t^2))
lines(t, predict(fit_linear), col = "blue", lwd = 2, lty = 1)
lines(t, predict(fit_quadratic), col = "red", lwd = 2, lty = 2)
lines(t, predict(fit_simple_quadratic), col = "green", lwd = 2, lty = 3)
# jakiś miernik R^2 do dopasowania do danych
adjusted_r2 <- function(model) {
summary(model)$r.squared
}
r2_linear <- adjusted_r2(fit_linear)
r2_quadratic <- adjusted_r2(fit_quadratic)
r2_simple_quadratic <- adjusted_r2(fit_simple_quadratic)
cat("y = a*t + b: ", r2_linear, "\n")
cat("y = a*t^2 + b*t + c: ", r2_quadratic, "\n")
cat("y = a*t^2 + c:", r2_simple_quadratic, "\n")
max(r2_linear, r2_quadratic, r2_simple_quadratic)
par(mfrow = c(2, 1))
y1 <- data$y1
y2 <- data$y2
t <- 1:length(y)
plot(y1)
plot(y2)
# y = at + b
fit_linear <- lm(y1 ~ t)
# y = a*t^2 + b*t + c
fit_quadratic <- lm(y1 ~ poly(t, 2, raw = TRUE))
# y = a*t^2 + c
fit_simple_quadratic <- lm(y1 ~ I(t^2))
lines(t, predict(fit_linear), col = "blue", lwd = 2, lty = 1)
lines(t, predict(fit_quadratic), col = "red", lwd = 2, lty = 2)
lines(t, predict(fit_simple_quadratic), col = "green", lwd = 2, lty = 3)
# jakiś miernik R^2 do dopasowania do danych
adjusted_r2 <- function(model) {
summary(model)$r.squared
}
r2_linear <- adjusted_r2(fit_linear)
r2_quadratic <- adjusted_r2(fit_quadratic)
r2_simple_quadratic <- adjusted_r2(fit_simple_quadratic)
cat("y = a*t + b: ", r2_linear, "\n")
cat("y = a*t^2 + b*t + c: ", r2_quadratic, "\n")
cat("y = a*t^2 + c:", r2_simple_quadratic, "\n")
max(r2_linear, r2_quadratic, r2_simple_quadratic)
y <- data$y1
t <- 1:length(y)
plot(y)
# y = at + b
fit_linear <- lm(y ~ t)
# y = a*t^2 + b*t + c
fit_quadratic <- lm(y ~ poly(t, 2, raw = TRUE))
# y = a*t^2 + c
fit_simple_quadratic <- lm(y ~ I(t^2))
lines(t, predict(fit_linear), col = "blue", lwd = 2, lty = 1)
lines(t, predict(fit_quadratic), col = "red", lwd = 2, lty = 2)
lines(t, predict(fit_simple_quadratic), col = "green", lwd = 2, lty = 3)
# jakiś miernik R^2 do dopasowania do danych
adjusted_r2 <- function(model) {
summary(model)$r.squared
}
r2_linear <- adjusted_r2(fit_linear)
r2_quadratic <- adjusted_r2(fit_quadratic)
r2_simple_quadratic <- adjusted_r2(fit_simple_quadratic)
cat("y = a*t + b: ", r2_linear, "\n")
cat("y = a*t^2 + b*t + c: ", r2_quadratic, "\n")
cat("y = a*t^2 + c:", r2_simple_quadratic, "\n")
max(r2_linear, r2_quadratic, r2_simple_quadratic)
y <- data$y1
t <- 1:length(y)
plot(y)
# y = at + b
fit_linear <- lm(y ~ t)
# y = a*t^2 + b*t + c
fit_quadratic <- lm(y ~ poly(t, 2, raw = TRUE))
# y = a*t^2 + c
fit_simple_quadratic <- lm(y ~ I(t^2))
lines(t, predict(fit_linear), col = "blue", lwd = 2, lty = 1)
lines(t, predict(fit_quadratic), col = "red", lwd = 2, lty = 2)
lines(t, predict(fit_simple_quadratic), col = "green", lwd = 2, lty = 3)
# jakiś miernik R^2 do dopasowania do danych
adjusted_r2 <- function(model) {
summary(model)$r.squared
}
r2_linear <- adjusted_r2(fit_linear)
r2_quadratic <- adjusted_r2(fit_quadratic)
r2_simple_quadratic <- adjusted_r2(fit_simple_quadratic)
cat("y = a*t + b: ", r2_linear, "\n")
cat("y = a*t^2 + b*t + c: ", r2_quadratic, "\n")
cat("y = a*t^2 + c:", r2_simple_quadratic, "\n")
max(r2_linear, r2_quadratic, r2_simple_quadratic)
plot(data$y2)
y2 <- data$y2
# y = a * exp(-b * t)
fit_exp <- nls(y ~ a * exp(-b * t), start = list(a = max(y), b = 0.1))
# y = a / (t + b)
fit_hyperbolic <- nls(y ~ a / (t + b), start = list(a = max(y), b = 1))
lines(t, predict(fit_exp), col = "purple", lwd = 2, lty = 1)
lines(t, predict(fit_hyperbolic), col = "orange", lwd = 2, lty = 2)
rss <- function(model) {
sum(residuals(model)^2)
}
tss <- sum((y - mean(y))^2)
r2_exp <- 1 - rss(fit_exp) / tss
r2_hyperbolic <- 1 - rss(fit_hyperbolic) / tss
# Print R^2 values
cat("y = a * exp(-b * t): ", r2_exp, "\n")
cat("y = a / (t + b): ", r2_hyperbolic, "\n")
# Compare and print the best model based on R^2
best_r2 <- max(r2_exp, r2_hyperbolic)
if (best_r2 == r2_exp) {
cat("The best fit is the Exponential model with R^2 =", r2_exp, "\n")
} else {
cat("The best fit is the Hyperbolic model with R^2 =", r2_hyperbolic, "\n")
}
# top-right
y2 <- data$y2
plot(y2)
# y = a * exp(-b * t)
fit_exp <- nls(y ~ a * exp(-b * t), start = list(a = max(y), b = 0.1))
# y = a / (t + b)
fit_hyperbolic <- nls(y ~ a / (t + b), start = list(a = max(y), b = 1))
lines(t, predict(fit_exp), col = "purple", lwd = 2, lty = 1)
lines(t, predict(fit_hyperbolic), col = "orange", lwd = 2, lty = 2)
rss <- function(model) {
sum(residuals(model)^2)
}
tss <- sum((y - mean(y))^2)
r2_exp <- 1 - rss(fit_exp) / tss
r2_hyperbolic <- 1 - rss(fit_hyperbolic) / tss
# Print R^2 values
cat("y = a * exp(-b * t): ", r2_exp, "\n")
cat("y = a / (t + b): ", r2_hyperbolic, "\n")
# Compare and print the best model based on R^2
best_r2 <- max(r2_exp, r2_hyperbolic)
if (best_r2 == r2_exp) {
cat("The best fit is the Exponential model with R^2 =", r2_exp, "\n")
} else {
cat("The best fit is the Hyperbolic model with R^2 =", r2_hyperbolic, "\n")
}
y2 <- data$y2
plot(y2)
fit_exp <- lm(log(y2) ~ t)
pred_exp <- exp(predict(fit_exp))
fit_hyperbolic <- lm(y2 ~ I(1 / t))
pred_hyperbolic <- predict(fit_hyperbolic)
lines(t, pred_exp, col = "purple", lwd = 2, lty = 1)
lines(t, pred_hyperbolic, col = "orange", lwd = 2, lty = 2)
adjusted_r2 <- function(model, original_y, predicted_y) {
tss <- sum((original_y - mean(original_y))^2)
rss <- sum((original_y - predicted_y)^2)
1 - rss / tss
}
r2_exp <- adjusted_r2(fit_exp, y, pred_exp)
r2_hyperbolic <- adjusted_r2(fit_hyperbolic, y, pred_hyperbolic)
cat("Exponential model (y = a * exp(-b * t)): R^2 =", r2_exp, "\n")
cat("Hyperbolic model (y = a / t + c): R^2 =", r2_hyperbolic, "\n")
max(r2_exp, r2_hyperbolic)
y2 <- data$y2
plot(y2)
fit_exp <- lm(log(y2) ~ t)
pred_exp <- exp(predict(fit_exp))
fit_hyperbolic <- lm(y2 ~ I(1 / t))
pred_hyperbolic <- predict(fit_hyperbolic)
lines(t, pred_exp, col = "purple", lwd = 2, lty = 1)
lines(t, pred_hyperbolic, col = "orange", lwd = 2, lty = 2)
adjusted_r2 <- function(model, original_y, predicted_y) {
tss <- sum((original_y - mean(original_y))^2)
rss <- sum((original_y - predicted_y)^2)
1 - rss / tss
}
r2_exp <- adjusted_r2(fit_exp, y, pred_exp)
r2_hyperbolic <- adjusted_r2(fit_hyperbolic, y, pred_hyperbolic)
cat("Exponential model (y = a * exp(-b * t)): R^2 =", r2_exp, "\n")
cat("Hyperbolic model (y = a / t + c): R^2 =", r2_hyperbolic, "\n")
max(r2_exp, r2_hyperbolic)
y2 <- data$y2
plot(y2)
fit_exp <- lm(log(y2) ~ t)
pred_exp <- exp(predict(fit_exp))
fit_exp_rev <- lm(log(y2) ~ (-1 / t))
pred_exp_rev <- exp(predict(fit_exp_rev))
fit_hyperbolic <- lm(y2 ~ I(1 / t))
pred_hyperbolic <- predict(fit_hyperbolic)
lines(t, pred_exp, col = "purple", lwd = 2, lty = 1)
lines(t, pred_hyperbolic, col = "orange", lwd = 2, lty = 2)
lines(t, pred_exp_rev, col = "blue", lwd = 2, lty = 2)
adjusted_r2 <- function(model, original_y, predicted_y) {
tss <- sum((original_y - mean(original_y))^2)
rss <- sum((original_y - predicted_y)^2)
1 - rss / tss
}
r2_exp <- adjusted_r2(fit_exp, y, pred_exp)
r2_exp_rev <- adjusted_r2(fit_exp_rev, y, pred_exp_rev)
r2_hyperbolic <- adjusted_r2(fit_hyperbolic, y, pred_hyperbolic)
cat("y = a * exp(-b * t): ", r2_exp, "\n")
cat("y = a / t + c: ", r2_hyperbolic, "\n")
cat("y = a / t + c: ", r2_exp_rev, "\n")
max(r2_exp, r2_hyperbolic, r2_exp_rev)
y2 <- data$y2
plot(y2)
fit_exp <- lm(log(y2) ~ t)
pred_exp <- exp(predict(fit_exp))
fit_exp_rev <- lm(log(y2) ~ t - 1)
pred_exp_rev <- exp(predict(fit_exp_rev))
fit_hyperbolic <- lm(y2 ~ I(1 / t))
pred_hyperbolic <- predict(fit_hyperbolic)
lines(t, pred_exp, col = "purple", lwd = 2, lty = 1)
lines(t, pred_hyperbolic, col = "orange", lwd = 2, lty = 2)
lines(t, pred_exp_rev, col = "blue", lwd = 2, lty = 2)
adjusted_r2 <- function(model, original_y, predicted_y) {
tss <- sum((original_y - mean(original_y))^2)
rss <- sum((original_y - predicted_y)^2)
1 - rss / tss
}
r2_exp <- adjusted_r2(fit_exp, y, pred_exp)
r2_exp_rev <- adjusted_r2(fit_exp_rev, y, pred_exp_rev)
r2_hyperbolic <- adjusted_r2(fit_hyperbolic, y, pred_hyperbolic)
cat("y = a * exp(-b * t): ", r2_exp, "\n")
cat("y = a / t + c: ", r2_hyperbolic, "\n")
cat("y = a / t + c: ", r2_exp_rev, "\n")
max(r2_exp, r2_hyperbolic, r2_exp_rev)
